
import GraphFramework.*;
import java.io.*;
import java.util.Scanner;

public class PhoneNWDesignApp{ //------------------------------------------------------------------
    
  ///Timer
     static long finalTime; 
       static long initialTime;
        static long endTime ;
        
    public static void main(String[] args) throws FileNotFoundException {
        
        
        // -- header --
        System.out.println("\t\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        System.out.println("\t\t|Testing to Computing the Miniming Spaning Tree & Comparing the Running Time|");
        System.out.println("\t\t\t----|Kruskal's algorithm & Prim's algorithm (min-heap)|----"     );
        System.out.println("\t\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n");
        
        
        System.out.println("a. Requirement-1: Read Graph from File ");
        System.out.println("b. Requirement-2: Make Graph from Cases ");
        
        Scanner read = new Scanner(System.in);
        System.out.print("Enter your choice: ");
        String  choice = slectChoice(read, read.next().toLowerCase()); //------------------------------------------------------------------
        
        
        if(choice.equals("a")){//-- Req.1--
            
            System.out.println("\n\n\t\t\ta. Requirement-1: Read Graph from File");
            System.out.println("\t\t\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n");
            //-- read file --
            File graphFile = new File("input.txt");
            BluePrintsGraph PhLNetwork = new BluePrintsGraph();//-- make graph -- //------------------------------------------------------------------
            PhLNetwork.readGraphFromFile(graphFile);
            // -- display Info. of Kruskal's algorithm --
            System.out.println("--- Minimum spanning tree generated by Kruskal algorithm ---\n");
             initialTime = System.nanoTime(); // starttiming 
            MSTAlgorithm K = new KruskalAlg(PhLNetwork);
             endTime = System.nanoTime(); // end time
             finalTime = endTime - initialTime;
             K.displayResultingMST();
             System.out.println("Time count: " + finalTime+"/ns"); 
            // -- display Info. of Prim's algorithm --
            System.out.println("\n--- Minimum spanning tree generated by Prime algorithm (min-heap)---\n");
            initialTime = System.nanoTime(); // starttiming 
           MSTAlgorithm P = new MHPrimAlg(PhLNetwork);
          endTime = System.nanoTime(); // end time
           finalTime = endTime - initialTime;
           P.displayResultingMST();
            System.out.println("Time count: " + finalTime+"/ns"); 
            
        }
        

        
        
        if(choice.equals("b")){//-- Req.2--
            
            System.out.println("\n\n\t\t\tb. Requirement-2: Make Graph from Cases ");
           System.out.println("\t\t\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"); 
            System.out.println("\t\t\tSeven Cases of Vertcies(n) and Edges(m): ");
            System.out.println("\t\t\t\t1. n= 1000, m= 10000\n\t\t\t\t2. n= 1000, m= 15000\n\t\t\t\t3. n= 1000, m= 25000");
            System.out.println("\t\t\t\t4. n= 5000, m= 15000\n\t\t\t\t5. n= 5000, m= 25000 ");
            System.out.println("\t\t\t\t6. n= 10000, m= 15000\n\t\t\t\t7. n= 10000, m= 25000 ");
            
            //-- read choice--
            System.out.print("Enter you choice: ");
            int userCase = read.nextInt();
            int[] List = cases(userCase, read);
     
             //we craete graph and send the choice of user (V and E) in make graph function
             System.out.println("Select the type of graph: \na. Directed\nb. Undirected");//------------------------------------------------------------------
             choice = slectChoice(read, read.next().toLowerCase()); //------------------------------------------------------------------
            BluePrintsGraph PhLNetwork = new BluePrintsGraph(List[0] , List[1] );
              if (choice.equals("a")) PhLNetwork.setIsDigraph(true) ;
              else PhLNetwork.setIsDigraph(false) ;
              PhLNetwork.make_graph();
            System.out.println("--- Minimum spanning tree generated by Kruskal algorithm ---\n");
            initialTime = System.nanoTime(); // starttiming 
            MSTAlgorithm K = new KruskalAlg(PhLNetwork);
                endTime = System.nanoTime(); // end time
           finalTime = endTime - initialTime;
           K.displayResultingMST();

      System.out.println("Time count: " + finalTime+"/ns"); 
            System.out.println("====================================================================");
            // -- display Info. of Prim's algorithm --
           System.out.println("\n--- Minimum spanning tree generated by Prime algorithm (min-heap)---\n");
             initialTime = System.nanoTime(); // starttiming 
            MSTAlgorithm P = new MHPrimAlg(PhLNetwork);
              endTime = System.nanoTime(); // end time
             finalTime = endTime - initialTime;
            P.displayResultingMST();
            
              System.out.println("Time count: " + finalTime+"/ns"); 
           
            
                
            }       
        } 
       

    public static int[] cases(int userCase , Scanner read) {
    int [] cases = new int[2];
    //-- Intilize variables --
     cases[0] = 0; //>> number of vertices
     cases[1] = 0; //>> number of edges
        switch (userCase) {
            case 1:
                cases[0] = 1000; cases[1] =10000; break;
            case 2:
                cases[0] = 1000; cases[1]=15000;break;
            case 3:
                cases[0]= 1000; cases[1]=25000;break;
            case 4:
                cases[0]= 5000; cases[1]=15000;break;
            case 5:
                cases[0]= 5000; cases[1]=25000;break;
            case 6:
                cases[0] = 10000; cases[1]=15000;break;
            case 7:
                cases[0] = 10000; cases[1]= 25000;break;
            default:
                System.out.println("Wrong choice");
                System.out.print("Enter your choice: ");
                return cases(read.nextInt() , read);
        }
  
    return cases;
}
    public static String slectChoice(Scanner read , String choice){  //------------------------------------------------------------------
        
         while (!choice.equals("a") && !choice.equals("b") ) {
                System.out.println("Wrong choice! ");
                System.out.print("Enter your choice: ");
                choice = read.next().toLowerCase();
              }
    return choice;
    }

    private PhoneNWDesignApp() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}


